// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-musl", "debian-openssl-1.1.x", "darwin"]
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int     @id @default(autoincrement())
  full_name               String
  phone                   String
  cpf                     String @unique
  created_at              DateTime @default(now())
  updated_at              DateTime?
  birth                   DateTime
  address                 Address[]
  account                 Account[]
}

model Address {
  id            Int   @id @default(autoincrement())
  user          User @relation(fields: [user_id], references: [id])
  user_id       Int
  cep           String
  street        String
  number        String
  complement    String
  neighborhood  String
  city          String
  state         String
  created_at    DateTime @default(now())
  updated_at    DateTime?
}

model Account {
  id                    Int   @id @default(autoincrement())
  agency                String
  user                  User @relation(fields: [user_id], references: [id])
  user_id               Int
  balance               Float
  password              String
  transaction_password  String
  email                 String @unique
  wrong_attempt         Int
  created_at            DateTime @default(now())
  updated_at            DateTime?
  status                AccountStatus
  transfer_from         Transfer[] @relation(name: "send")
  transfer_to           Transfer[] @relation(name: "receive")
  ticket                Ticket[]
}

model Transfer {
  id                    Int @id @default(autoincrement())
  account               Account @relation(name: "send", fields: [account_id], references: [id])
  account_id            Int
  account_receiver      Account @relation(name: "receive", fields: [account_receiver_id], references: [id])
  account_receiver_id   Int
  schedule_date         DateTime @default(now())
  created_at            DateTime @default(now())
  value                 Float 
  status                TransferStatus
}

model Ticket{
  id              Int @id @default(autoincrement())
  account         Account @relation(fields: [account_id], references: [id])
  account_id      Int
  title           String
  is_solved       Boolean
  created_at      DateTime @default(now())
  messages        Messages[]
}

model Messages{
  id              Int @id @default(autoincrement())
  message         String
  ticket          Ticket @relation(fields: [ticket_id], references: [id])
  ticket_id       Int
  date            DateTime @default(now())
}

enum AccountStatus{
  BLOCKED
  ACTIVE
  INACTIVE
}

enum TransferStatus{
  CANCELED
  SUCCESSFUL
  INPROGRESS
  REFOUND
}