// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-musl", "debian-openssl-1.1.x", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum AccessStatus{
  BLOCKED
  ACTIVE
  INACTIVE
  INCOMPLETE
}

enum TransferStatus{
  CANCELED
  SUCCESSFUL
  INPROGRESS
  REFOUND
}

model User_info {
  id             String       @id @default(uuid()) @db.Uuid
  full_name      String       @db.VarChar(200)
  email          String       @db.VarChar(100) @unique
  phone          String       @db.VarChar(20)
  created_at     DateTime     @default(now()) @db.Timestamp()
  updated_at     DateTime?    @default(now()) @db.Timestamp()
  birth          DateTime?    @db.Date @default(now())
  status         AccessStatus?
  user_auth      User_auth?
  address        Address[]
  account        Account[]
  messages       Messages[]
  ticket         Ticket[]
}

model User_auth{
  id            String      @id @default(uuid()) @db.Uuid
  user          User_info   @relation(fields: [user_info_id], references: [id])
  user_info_id  String      @unique @db.Uuid
  cpf           String      @unique @db.VarChar(15)
  password      String      @db.VarChar(100)
  wrong_pass    Int         @db.Integer @default(0)
  created_at    DateTime    @db.Timestamp() @default(now())
  updated_at    DateTime?   @db.Timestamp() @default(now())
}

model Address {
  id            String      @id @default(uuid()) @db.Uuid
  user          User_info   @relation(fields: [user_id], references: [id])
  user_id       String      @db.Uuid
  type          String?     @db.VarChar(100)
  cep           String      @db.VarChar(10)
  street        String      @db.Text
  number        String      @db.VarChar(20)
  complement    String?     @db.VarChar(200)
  neighborhood  String      @db.VarChar(200)
  city          String      @db.VarChar(200)
  state         String      @db.VarChar(2)
  created_at    DateTime    @default(now()) @db.Timestamp()
  updated_at    DateTime?   @db.Timestamp() @default(now())
}

model Account {
  id                    String      @id @default(uuid()) @db.Uuid
  account_number        Int         @unique @default(autoincrement())
  agency                String      @db.VarChar(10) @default("0001")
  user                  User_info   @relation(fields: [user_id], references: [id])
  user_id               String      @db.Uuid
  balance               Decimal     @db.Money
  transaction_password  String      @db.VarChar(100)
  wrong_pass            Int         @db.Integer @default(0)
  tag                   String?     @db.Text
  created_at            DateTime    @default(now()) @db.Timestamp()
  updated_at            DateTime?   @db.Timestamp() @default(now())
  status                AccessStatus
  transfer_from         Transfer[] @relation(name: "send")
  transfer_to           Transfer[] @relation(name: "receive")
}

model Transfer {
  id                    String      @id @default(uuid()) @db.Uuid
  account               Account     @relation(name: "send", fields: [account_id], references: [id])
  account_id            String      @db.Uuid
  account_receiver      Account     @relation(name: "receive", fields: [account_receiver_id], references: [id])
  account_receiver_id   String      @db.Uuid
  schedule_date         DateTime    @default(now()) @db.Timestamp()
  created_at            DateTime    @default(now()) @db.Timestamp()
  updated_at            DateTime?   @db.Timestamp() @default(now())
  value                 Decimal     @db.Money
  status                TransferStatus
}

model Ticket{
  id              String      @id @default(uuid()) @db.Uuid
  user            User_info   @relation(fields: [user_info_id], references: [id])
  user_info_id    String      @db.Uuid
  title           String      @db.VarChar(50)
  description     String      @db.Text
  is_solved       Boolean     @db.Boolean
  created_at      DateTime    @default(now()) @db.Timestamp()
  updated_at      DateTime?   @db.Timestamp() @default(now())
  messages        Messages[]
}

model Messages{
  id              String        @id @default(uuid()) @db.Uuid
  message         String        @db.Text
  ticket          Ticket        @relation(fields: [ticket_id], references: [id])
  ticket_id       String        @db.Uuid
  user            User_info     @relation(fields: [user_id], references: [id])
  user_id         String        @db.Uuid
  suport          Suport_info   @relation(fields: [suport_id], references: [id])
  suport_id       String        @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp()
  updated_at      DateTime?     @db.Timestamp() @default(now())
}

model Suport_info{
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @db.Text
  role        String      @db.VarChar(50)
  created_at  DateTime    @db.Timestamp() @default(now())
  updated_at  DateTime?   @db.Timestamp() @default(now())
  messages    Messages[]
  suport_auth Suport_auth?
}

model Suport_auth{
  id              String @id @default(uuid()) @db.Uuid
  suport          Suport_info @relation(fields: [suport_info_id], references: [id])
  suport_info_id  String @unique @db.Uuid
  email           String @db.VarChar(100)
  password        String @db.VarChar(50)
  created_at      DateTime @db.Timestamp() @default(now())
  updated_at      DateTime? @db.Timestamp() @default(now())
}